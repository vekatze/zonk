import {
  core.text {_drop-N, text-byte-length},
  noa.move.check {check},
  noa.move.gen.pair {pair-gen},
  noa.move.gen.text {text-gen},
  noa.move.make-noa-kit {make-default-noa-kit},
  this.move.make-parse-error {make-parse-error},
  this.move.make-zonk-kit {make-zonk-kit},
  this.move.parse {choice, chunk, end-of-input, many, some, zonk},
  this.move.private.state,
  this.rule.error {report},
  this.rule.zonk-kit {_Zonk-Kit},
}

define main(): unit {
  pin k = make-default-noa-kit() in
  check(
    k,
    "chunk(t1) against append(t1, t2) must succeed and the remaining text is t2",
    pair-gen(text-gen, text-gen),
    function (p) {
      let Pair(t1, t2) = p in
      let full-text on t1, t2 = core.text.append(t1, t2) in
      pin k = make-zonk-kit(full-text) in
      let parse-result on t1, t2 =
        let p = chunk(t1) in
        match p(k) {
        | Right(_) =>
          tie _Zonk-Kit of {input-stream} = k in
          let cursor = this.move.private.state._get-cursor(k) in
          pin stream' = _drop-N(input-stream, cursor) in
          let result = eq-text(t2, stream') in
          result
        | Left(_) =>
          False
        }
      in
      let _ = t1 in
      let _ = t2 in
      parse-result
    },
  );
  check(
    k,
    "`t1` can be parsed by (chunk(t1) → end-of-input)",
    text-gen,
    function (!t) {
      pin k = make-zonk-kit(!t) in
      pin t = !t in
      let parse-result =
        let p: zonk(unit) =
          function (k) {
            try _ = chunk(t)(k) in
            try _ = end-of-input(k) in
            Right(Unit)
          }
        in
        match p(k) {
        | Right(_) =>
          True
        | Left(_) =>
          False
        }
      in
      parse-result
    },
  );
  check(
    k,
    "`append(t1, t2)` can be parsed by `chunk(t1) → chunk(t2) → end-of-input`",
    pair-gen(text-gen, text-gen),
    function (p) {
      let Pair(t1, t2) = p in
      let full-text on t1, t2 = core.text.append(t1, t2) in
      pin k = make-zonk-kit(full-text) in
      let result on t1, t2 =
        let p: zonk(unit) =
          function (k) {
            try _ = chunk(t1)(k) in
            try _ = chunk(t2)(k) in
            try _ = end-of-input(k) in
            Right(Unit)
          }
        in
        match p(k) {
        | Right(_) =>
          True
        | Left(_) =>
          False
        }
      in
      let _ = t1 in
      let _ = t2 in
      result
    },
  );
  check(
    k,
    "for any non-empty text, end-of-input must fail",
    text-gen,
    function (t) {
      let len on t = text-byte-length(t) in
      if eq-int(len, 0) {
        True
      } else {
        pin k = make-zonk-kit(t) in
        let result =
          match end-of-input(k) {
          | Right(_) =>
            False
          | Left(_) =>
            True
          }
        in
        result
      }
    },
  )
  // ...
}

inline _sample-parser: zonk(unit) {
  // constructs a parser
  function (k) {
    // accepts: foo
    try _ = chunk("foo")(k) in
    // accepts: (buz|test|bar)
    try _ = choice("buz, test, or bar", [chunk("buz"), chunk("test")], chunk("bar"))(k) in
    // accepts: (qux)+
    try _ = some(chunk("qux"))(k) in
    // accepts: (yo)*
    try _ = many(chunk("yo"))(k) in
    // accepts: end-of-input
    try _ = end-of-input(k) in
    Right(Unit)
  }
}

define zen(): unit {
  pin k = make-zonk-kit(*"fooXXXXquxquxyoyoyoyo") in
  match _sample-parser(k) {
  | Right(_) =>
    print("pass\n")
  | Left(e) =>
    let err = make-parse-error(k, e) in
    printf("fail: {}\n", [report(err)])
  }
}
