import {
  core.bool {all},
  core.text {_drop-N, text-byte-length},
  core.text.io {print-line},
  noa.check {check},
  noa.gen.pair {pair-gen},
  noa.gen.text {text-gen},
  noa.make-noa-kit {make-default-noa-kit},
  noa.test {test},
  this.error {Parse-Error, report},
  this.make-parse-error {make-parse-error},
  this.make-zonk-kit {make-zonk-kit},
  this.parse {choice, chunk, drop-while, end-of-input, many, satisfy, some, take-while, zonk},
  this.point {Point},
  this.private.state,
  this.zonk-kit {_Zonk-Kit},
}

define main(): unit {
  pin k = make-default-noa-kit();
  check(
    k,
    "chunk(t1) against append(t1, t2) must succeed and the remaining text is t2",
    pair-gen(text-gen, text-gen),
    function (p) {
      let Pair(t1, t2) = p;
      let full-text on t1, t2 = core.text.append(t1, t2);
      pin k = make-zonk-kit(full-text);
      let parse-result on t1, t2 = {
        let p = chunk(t1);
        match p(k) {
        | Right(_) =>
          tie _Zonk-Kit of {input-stream} = k;
          let cursor = this.private.state._get-cursor(k);
          pin stream' = _drop-N(input-stream, cursor);
          let result = eq-text(t2, stream');
          result
        | Left(_) =>
          False
        }
      };
      let _ = t1;
      let _ = t2;
      parse-result
    },
  );
  check(
    k,
    "`t1` can be parsed by (chunk(t1) → end-of-input)",
    text-gen,
    function (!t) {
      pin k = make-zonk-kit(!t);
      pin t = !t;
      let parse-result = {
        let p: zonk(unit) = {
          function (k) {
            try _ = chunk(t)(k);
            try _ = end-of-input(k);
            Right(Unit)
          }
        };
        match p(k) {
        | Right(_) =>
          True
        | Left(_) =>
          False
        }
      };
      parse-result
    },
  );
  check(
    k,
    "`append(t1, t2)` can be parsed by `chunk(t1) → chunk(t2) → end-of-input`",
    pair-gen(text-gen, text-gen),
    function (p) {
      let Pair(t1, t2) = p;
      let full-text on t1, t2 = core.text.append(t1, t2);
      pin k = make-zonk-kit(full-text);
      let result on t1, t2 = {
        let p: zonk(unit) = {
          function (k) {
            try _ = chunk(t1)(k);
            try _ = chunk(t2)(k);
            try _ = end-of-input(k);
            Right(Unit)
          }
        };
        match p(k) {
        | Right(_) =>
          True
        | Left(_) =>
          False
        }
      };
      let _ = t1;
      let _ = t2;
      result
    },
  );
  check(
    k,
    "for any non-empty text, end-of-input must fail",
    text-gen,
    function (t) {
      let len on t = text-byte-length(t);
      if eq-int(len, 0) {
        True
      } else {
        pin k = make-zonk-kit(t);
        let result =
          match end-of-input(k) {
          | Right(_) =>
            False
          | Left(_) =>
            True
          };
        result
      }
    },
  );
  test(
    k,
    "take-while, chunk, take-while",
    function () {
      pin k = make-zonk-kit(*"xxx\nbar");
      let my-parser: zonk(unit) =
        function (k) {
          try _ =
            take-while(function (r) {
              eq-rune(r, `x`)
            })(k);
          try _ = chunk("\n")(k);
          try _ =
            take-while(function (r) {
              ne-rune(r, `x`)
            })(k);
          Right(Unit)
        };
      match my-parser(k) {
      | Right(_) =>
        True
      | Left(_) =>
        False
      }
    },
  );
  test(
    k,
    "drop-while, chunk, drop-while",
    function () {
      pin k = make-zonk-kit(*"xxx\nbar");
      let my-parser: zonk(unit) =
        function (k) {
          try _ =
            drop-while(function (r) {
              eq-rune(r, `x`)
            })(k);
          try _ = chunk("\n")(k);
          try _ =
            drop-while(function (r) {
              ne-rune(r, `x`)
            })(k);
          Right(Unit)
        };
      match my-parser(k) {
      | Right(_) =>
        True
      | Left(_) =>
        False
      }
    },
  );
  test(
    k,
    "report error locations correctly (take-while, chunk)",
    function () {
      pin k = make-zonk-kit(*"xxx\nbar");
      let my-parser: zonk(unit) =
        function (k) {
          try _ =
            take-while(function (r) {
              eq-rune(r, `x`)
            })(k);
          try _ = chunk("\n")(k);
          try _ = chunk("a")(k);
          Right(Unit)
        };
      match my-parser(k) {
      | Right(_) =>
        False
      | Left(e) =>
        let Parse-Error of {error-location} = make-parse-error(k, e);
        pin actual = error-location;
        pin expected = Point(1, 0);
        eq-data(actual, expected)
      }
    },
  );
  test(
    k,
    "report error locations correctly (drop-while, chunk)",
    function () {
      pin k = make-zonk-kit(*"xxx\nbar");
      let my-parser: zonk(unit) =
        function (k) {
          try _ =
            drop-while(function (r) {
              all[
                ne-rune(r, `y`),
                ne-rune(r, `\n`),
              ]
            })(k);
          try _ = chunk("\n")(k);
          try _ = chunk("a")(k);
          Right(Unit)
        };
      match my-parser(k) {
      | Right(_) =>
        False
      | Left(e) =>
        let Parse-Error of {error-location} = make-parse-error(k, e);
        pin actual = error-location;
        pin expected = Point(1, 0);
        eq-data(actual, expected)
      }
    },
  );
  test(
    k,
    "report error locations correctly (satisfy, chunk)",
    function () {
      pin k = make-zonk-kit(*"xxx\nbar");
      let my-parser: zonk(unit) =
        function (k) {
          try _ =
            drop-while(function (r) {
              all[
                ne-rune(r, `y`),
                ne-rune(r, `\n`),
              ]
            })(k);
          try _ =
            satisfy("foo", function (r) {
              eq-rune(r, `\n`)
            })(k);
          try _ = chunk("a")(k);
          Right(Unit)
        };
      match my-parser(k) {
      | Right(_) =>
        False
      | Left(e) =>
        let Parse-Error of {error-location} = make-parse-error(k, e);
        pin actual = error-location;
        pin expected = Point(1, 0);
        eq-data(actual, expected)
      }
    },
  );
}

inline _sample-parser: zonk(unit) {
  // constructs a parser
  function (k) {
    // accepts: foo
    try _ = chunk("foo")(k);
    // accepts: (buz|test|bar)
    try _ = choice("buz, test, or bar", List[chunk("buz"), chunk("test")], chunk("bar"))(k);
    // accepts: (qux)+
    try _ = some(chunk("qux"))(k);
    // accepts: (yo)*
    try _ = many(chunk("yo"))(k);
    // accepts: end-of-input
    try _ = end-of-input(k);
    Right(Unit)
  }
}

define zen(): unit {
  pin k = make-zonk-kit(*"fooXXXXquxquxyoyoyoyo");
  match _sample-parser(k) {
  | Right(_) =>
    print("pass\n")
  | Left(e) =>
    let err = make-parse-error(k, e);
    pin err' = report(err);
    print("fail: ");
    print-line(err');
  }
}
