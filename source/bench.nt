import {
  core.control {loop},
  this.move.make-zonk-kit {make-zonk-kit},
  this.move.parse {choice, chunk, label, zonk},
}

define _try-parse(p: zonk(unit)): unit {
  pin k = make-zonk-kit(*"abcnああhehoge \n\r  hehehetest") in
  let my-parser: zonk(unit) =
    function (k) {
      try _ = chunk("abc")(k) in
      try _ = p(k) in
      Right(Unit)
    }
  in
  match my-parser(k) {
  | Left(_) =>
    Unit
  | Right(_) =>
    print("right\n")
  }
}

define _bench(): unit {
  let whatever =
    choice of {
      candidates = {
        [
          chunk("gaoe"),
          choice([chunk("k")], label("whatever", function (k) {
            try _ = chunk("px")(k) in
            try _ = chunk("kgあ")(k) in
            Right(Unit)
          })),
          chunk("tあい"),
          label("whatever 2", function (k) {
            try _ = chunk("pt")(k) in
            try _ = chunk("あhebc")(k) in
            Right(Unit)
          }),
          function (k) {
            try _ = chunk("pt")(k) in
            try _ = chunk("あhebc")(k) in
            Right(Unit)
          },
          chunk("abc"),
          chunk("{}"),
        ]
      },
      fallback = chunk("tn"),
    }
  in
  loop(1000000, function (_) {
    _try-parse(whatever)
  })
}

define zen(): unit {
  _bench()
}

define main(): unit {
  _bench()
}
