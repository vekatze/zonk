import {
  core.list {any, for-each},
  core.text.io {print-line},
  this.error {report},
  this.make-parse-error {make-parse-error},
  this.make-zonk-kit {make-zonk-kit},
  this.parse {attempt, branch, chunk, end-of-input, label, many, satisfy, zonk},
  this.regex {Any, Choose, Chunk, End-Of-Input, Join, Repeat, regex},
}

define _from-regex<c>(r: regex): zonk(c, unit) {
  match r {
  | Any(label, rs) =>
    function (k) {
      try _ =
        satisfy(label, function (r) {
          let bs =
            for-each(rs, function (r') {
              eq-rune(r, r')
            });
          any(bs)
        })(k);
      Right(Unit)
    }
  | Chunk(t) =>
    chunk(t)
  | Choose(name, xs, fallback) =>
    let xs' = for-each(xs, exact _from-regex);
    let fallback' = _from-regex(fallback);
    let go =
      define loop(xs: list(zonk(c, unit)), fallback: zonk(c, unit)): zonk(c, unit) {
        match xs {
        | Nil =>
          fallback
        | Cons(x, rest) =>
          branch(attempt(x), loop(rest, fallback))
        }
      };
    label(name, go(xs', fallback'))
  | Join(xs) =>
    let xs' = for-each(xs, exact _from-regex);
    let go =
      define loop(xs: list(zonk(c, unit))): zonk(c, unit) {
        match xs {
        | Nil =>
          function (_) {
            Right(Unit)
          }
        | Cons(x, xs) =>
          function (k) {
            try _ = x(k);
            loop(xs)(k)
          }
        }
      };
    go(xs')
  | Repeat(r) =>
    function (k) {
      try _ = many(attempt(_from-regex(r)))(k);
      Right(Unit)
    }
  | End-Of-Input =>
    end-of-input
  }
}

inline recognize(r: regex, input: text): bool {
  pin k = make-zonk-kit(input, unit);
  match _from-regex(r)(k) {
  | Right(_) =>
    True
  | Left(e) =>
    pin t = report(make-parse-error(k, e));
    print-line(t);
    False
  }
}

define zen(): unit {
  let reg =
    Join(List[
      Repeat(
        Join(List[
          Choose(
            "variable",
            List[
              Chunk("pqr"),
              Chunk("H"),
              Any("Lorem ipsum", List[`P`, `あ`, `k`]),
            ],
            Chunk("abc"),
          ),
          Chunk(":"),
          Choose("type", List[Chunk("AAAA")], Chunk("XX")),
          Chunk(", "),
        ]),
      ),
      End-Of-Input,
    ]);
  if recognize(reg, *"abc:XX, あ:AAAA, k:XX, ") {
    print("True\n")
  } else {
    print("False\n")
  }
}
