import {
  core.float.io {print-float},
  core.float.parse {parse-float},
  core.function {compose},
  core.int.io {print-int, print-int-line},
  core.int.parse {parse-int},
  core.list {any, reverse},
  core.text.io {print-line},
  this.move.make-parse-error {make-parse-error},
  this.move.make-zonk-kit {make-zonk-kit},
  this.move.parse {
    drop-while,
    end-of-input,
    parsed,
    report-unexpected-input,
    take-while,
    zonk,
  },
  this.rule.error {report},
}

define _is-space(r: rune): bool {
  if eq-rune(r, ` `) {
    True
  } else-if ule-int32(sub-int32(magic cast(rune, int32, r), 0x9), 0x4) {
    True
  } else {
    False
  }
}

define skip-space: zonk(unit) {
  drop-while(_is-space)
}

define _any-number(r: rune): bool {
  let b1 = le-rune(`0`, r);
  let b2 = le-rune(r, `9`);
  and(b1, b2)
}

define _is-integer-rune(r: rune): bool {
  any(List[
    _any-number(r),
    eq-rune(r, `+`),
    eq-rune(r, `-`),
  ])
}

define _is-float-rune(r: rune): bool {
  any(List[
    _any-number(r),
    eq-rune(r, `.`),
    eq-rune(r, `e`),
    eq-rune(r, `E`),
    eq-rune(r, `+`),
    eq-rune(r, `-`),
  ])
}

inline read-symbol(): zonk(text) {
  function (k) {
    try result = take-while(compose(not, _is-space))(k);
    try _ = skip-space(k);
    Right(result)
  }
}

inline read-int: zonk(int) {
  function (k) {
    try num-text = take-while(_is-integer-rune)(k);
    try _ = skip-space(k);
    let none-or-int on num-text = parse-int(num-text);
    let _ = num-text;
    match none-or-int {
    | Left(_) =>
      report-unexpected-input("integer")
    | Right(v) =>
      Right(v)
    }
  }
}

inline read-float: zonk(float) {
  function (k) {
    try num-text = take-while(_is-float-rune)(k);
    try _ = skip-space(k);
    let none-or-float on num-text = parse-float(num-text);
    let _ = num-text;
    match none-or-float {
    | Left(_) =>
      report-unexpected-input("float")
    | Right(v) =>
      Right(v)
    }
  }
}

define read-int-list(size: int): zonk(list(int)) {
  function (k) {
    let f =
      define self(cursor: int, acc: list(int)): parsed(list(int)) {
        if le-int(cursor, 0) {
          Right(reverse(acc))
        } else {
          try v = read-int(k);
          self(sub-int(cursor, 1), Cons(v, acc))
        }
      };
    f(size, Nil)
  }
}

inline read-vector<a>(size: int, !p: zonk(a)): zonk(vector(a)) {
  function (k) {
    let f =
      define self(cursor: int, acc: vector(a)): parsed(vector(a)) {
        if ge-int(cursor, size) {
          Right(acc)
        } else {
          try v = !p(k);
          try _ = skip-space(k);
          self(add-int(cursor, 1), core.vector.push-back(acc, v))
        }
      };
    try result = f(0, core.vector.make(size));
    Right(result)
  }
}

define read-int-vector(size: int): zonk(vector(int)) {
  read-vector(size, read-int)
}

define read-float-list(size: int): zonk(list(float)) {
  function (k) {
    let f =
      define self(cursor: int, acc: list(float)): parsed(list(float)) {
        if le-int(cursor, 0) {
          Right(reverse(acc))
        } else {
          try v = read-float(k);
          try _ = skip-space(k);
          self(sub-int(cursor, 1), Cons(v, acc))
        }
      };
    f(size, Nil)
  }
}

define read-float-vector(size: int): zonk(vector(float)) {
  read-vector(size, read-float)
}

inline _sample-zonk: zonk(unit) {
  function (k) {
    try v1 = read-int(k);
    try v2 = read-int(k);
    try xs = read-float-vector(v1)(k);
    try _ = end-of-input(k);
    print-int(v1);
    print(", ");
    print-int-line(v2);
    core.vector.for(xs, function (x, _) {
      print-float(x, 6);
      print(" ");
    });
    Right(Unit)
  }
}

define zen(): unit {
  pin k = make-zonk-kit(*"6 42 \n   5 4 3 2 1 -1234");
  match _sample-zonk(k) {
  | Right(_) =>
    print("pass\n")
  | Left(e) =>
    let e' = make-parse-error(k, e);
    pin e'' = report(e');
    print("fail: ");
    print-line(e'');
  }
}
