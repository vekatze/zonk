import {
  core.cell {borrow, mutate},
  core.magic,
  core.memory {load-int},
  core.rune,
  this.rule.zonk-kit {_Position, _Zonk-Kit, position, zonk-kit},
}

define _trick-read<a>(ch: &cell(a)): &a {
  let ch = core.magic.cast(&cell(a), pointer, ch) in
  let val-base = load-int(ch) in
  core.magic.cast(int, &a, val-base)
}

inline _set-gap-size(k: &zonk-kit, gap-size: int): unit {
  tie _Zonk-Kit of {position-ref} = k in
  mutate(position-ref, function (position) {
    let _Position of {cursor, line, column} = position in
    _Position of {cursor, line, column, gap-size}
  })
}

define _get-cursor(k: &zonk-kit): int {
  tie _Zonk-Kit of {position-ref} = k in
  let position = _trick-read(position-ref) in
  tie _Position of {cursor} = position in
  *cursor
}

define _get-gap-size(k: &zonk-kit): int {
  tie _Zonk-Kit of {position-ref} = k in
  borrow(position-ref, function (position) {
    tie _Position of {gap-size} = position in
    quote {*gap-size}
  })
}

define _get-line(k: &zonk-kit): int {
  tie _Zonk-Kit of {position-ref} = k in
  borrow(position-ref, function (position) {
    tie _Position of {line} = position in
    quote {*line}
  })
}

define _get-column(k: &zonk-kit): int {
  tie _Zonk-Kit of {position-ref} = k in
  borrow(position-ref, function (position) {
    tie _Position of {column} = position in
    quote {*column}
  })
}

inline _proceed(k: &zonk-kit, byte-offset: int, line-offset: int, column-offset: int): unit {
  tie _Zonk-Kit of {position-ref} = k in
  mutate(position-ref, function (position) {
    let _Position of {cursor, line, column, gap-size} = position in
    let cursor = add-int(cursor, byte-offset) in
    let line = add-int(line, line-offset) in
    let column = add-int(column, column-offset) in
    _Position of {cursor, line, column, gap-size}
  })
}

inline _proceed-by-rune(k: &zonk-kit, r: rune): unit {
  if eq-rune(r, `\n`) {
    _proceed of {k, byte-offset = 1, line-offset = 1, column-offset = 0}
  } else {
    let byte-offset = core.rune.size(r) in
    _proceed of {k, byte-offset, line-offset = 0, column-offset = 1}
  }
}

inline _export-state(k: &zonk-kit): position {
  tie _Zonk-Kit of {position-ref} = k in
  core.cell.clone(position-ref)
}

inline _import-state(k: &zonk-kit, new-position: position): unit {
  tie _Zonk-Kit of {position-ref} = k in
  mutate(position-ref, function (old-position) {
    let _Position of {} = old-position in
    new-position
  })
}
