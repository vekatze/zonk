import {
  this.error {error},
  this.state {state},
}

inline parser(a: tau): tau {
  (input: &cell(state)) -> except(error, a)
}

inline zonk<a, b>(p1: parser(a), f: (a) -> parser(b)): parser(b) {
  function (st-ref: &cell(state)) {
    try v1 = p1(st-ref) in
    f(v1)(st-ref)
  }
}

inline return<a>(x: a): parser(a) {
  function (_: &cell(state)) {
    Pass(x)
  }
}

inline get(): parser(&cell(state)) {
  function (st-ref: &cell(state)) {
    Pass(st-ref)
  }
}
