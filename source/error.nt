import {
  core.external {malloc},
  core.int {max-int},
  core.int8-array {_copy-int8-array},
  core.list {is-empty},
  core.magic,
  core.memory {store-int},
  core.text {format, intercalate, take-N},
  core.text.show {show-text, show-text-N},
  core.word,
  this.pos {Pos, pos},
}

data error {
| Error(
    found: int,
    expected: list(&text),
  )
}

define unexpected-end-of-input(): error {
  Error of {found = 0, expected = []}
}

define _unsafe-slice-N-absolute(start: int, size: int, t: &text): text {
  let start = max-int(start, 0) in
  let size = max-int(size, 0) in
  let ptr = core.magic.cast(&text, int, t) in
  let u = core.word.size in
  let content-ptr = add-int(ptr, add-int(mul-int(u, 2), start)) in
  let new-ptr = malloc(add-int(size, mul-int(u, 2))) in
  store-int(0, new-ptr);
  store-int(size, add-int(new-ptr, u));
  let new-content-ptr = add-int(new-ptr, mul-int(u, 2)) in
  _copy-int8-array(content-ptr, new-content-ptr, 0, size);
  core.magic.cast(int, text, new-ptr)
}

define show-found(size: int, stream: &text): text {
  show-text(take-N(size, stream))
}

define show-position(p: pos): text {
  let Pos of {row, column} = p in
  format("row {}, column {}", [%ld(add-int(row, 1)), %ld(add-int(column, 1))])
}

define set-expected(o: &text, e: error): error {
  match e {
  | Error of {found} =>
    Error of {found, expected = [o]}
  }
}

inline join(e1: error, e2: error): error {
  match e1, e2 {
  | Error(found1, expected1), Error(found2, expected2) =>
    Error(max-int(found1, found2), append(expected1, expected2))
  }
}

define report(e: error, position: pos, stream: &text): text {
  match e {
  | Error of {found, expected} =>
    let position' = show-position(position) in
    let b on expected = is-empty(expected) in
    if b {
      format("parse error at {}:\nunexpected:\n  {}", [position', show-found(found, stream)])
    } else {
      let expected' = intercalate(*", ", map(show-text-N, expected)) in
      format("parse error at {}:\nexpected:\n  {}\nfound:\n  {}", [position', expected', show-found(found, stream)])
    }
  }
}
