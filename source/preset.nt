import {
  core.float.parse {parse-float},
  core.float.show {show-float},
  core.function {compose},
  core.int.parse {parse-int},
  core.int.show {show-int},
  core.list {any, reverse},
  core.memory {store-float, store-int},
  core.pointer {shift},
  core.vector {_Vector-Info, _get-vector-info, vector},
  this.error {report},
  this.parser {drop-while, parser, report-unexpected-input, return, run, take-while, zonk},
  this.state {new-state},
}

define _is-space(r: rune): bool {
  if eq-rune(r, ` `) {
    True
  } else-if ule-int32(sub-int32(magic cast(rune, int32, r), 0x9), 0x4) {
    True
  } else {
    False
  }
}

define skip-space(): parser(unit) {
  drop-while(_is-space)
}

define _any-number(r: rune): bool {
  let b1 = le-rune(`0`, r) in
  let b2 = le-rune(r, `9`) in
  and(b1, b2)
}

define _is-integer-rune(r: rune): bool {
  any([
    _any-number(r),
    eq-rune(r, `+`),
    eq-rune(r, `-`),
  ])
}

define _is-float-rune(r: rune): bool {
  any([
    _any-number(r),
    eq-rune(r, `.`),
    eq-rune(r, `e`),
    eq-rune(r, `E`),
    eq-rune(r, `+`),
    eq-rune(r, `-`),
  ])
}

inline read-symbol(): parser(text) {
  take-while(compose(not, _is-space))
}

inline read-int(): parser(int) {
  with zonk {
    bind num-text = take-while(_is-integer-rune) in
    let none-or-int on num-text = parse-int(num-text) in
    match none-or-int {
    | Left(_) =>
      report-unexpected-input("integer")
    | Right(v) =>
      return(v)
    }
  }
}

inline read-float(): parser(float) {
  with zonk {
    bind num-text = take-while(_is-float-rune) in
    let none-or-float on num-text = parse-float(num-text) in
    match none-or-float {
    | Left(_) =>
      report-unexpected-input("float")
    | Right(v) =>
      return(v)
    }
  }
}

define read-int-list(size: int): parser(list(int)) {
  let f =
    define self(cursor: int, acc: list(int)): parser(list(int)) {
      if le-int(cursor, 0) {
        return(reverse(acc))
      } else {
        with zonk {
          bind v = read-int() in
          bind _ = skip-space() in
          self(sub-int(cursor, 1), Cons(v, acc))
        }
      }
    }
  in
  f(size, Nil)
}

define _store-int(vec: &vector(int), index: int, value: int): unit {
  let _Vector-Info of {content-ptr, word-size} = _get-vector-info(vec) in
  let elem-address = shift(content-ptr, mul-int(word-size, index)) in
  store-int(value, elem-address)
}

define _store-float(vec: &vector(float), index: int, value: float): unit {
  let _Vector-Info of {content-ptr, word-size} = _get-vector-info(vec) in
  let elem-address = shift(content-ptr, mul-int(word-size, index)) in
  store-float(value, elem-address)
}

define read-int-vector(size: int): parser(vector(int)) {
  let base =
    core.vector.create(size, function (_) {
      0
    })
  in
  let f =
    define self(cursor: int, base: vector(int)): parser(vector(int)) {
      if ge-int(cursor, size) {
        return(base)
      } else {
        with zonk {
          bind v = read-int() in
          bind _ = skip-space() in
          let _ on base = _store-int(base, cursor, v) in
          self(add-int(cursor, 1), base)
        }
      }
    }
  in
  with zonk {
    bind result = f(0, base) in
    return(result)
  }
}

define read-float-list(size: int): parser(list(float)) {
  let f =
    define self(cursor: int, acc: list(float)): parser(list(float)) {
      if le-int(cursor, 0) {
        return(reverse(acc))
      } else {
        with zonk {
          bind v = read-float() in
          bind _ = skip-space() in
          self(sub-int(cursor, 1), Cons(v, acc))
        }
      }
    }
  in
  f(size, Nil)
}

define read-float-vector(size: int): parser(vector(float)) {
  let base =
    core.vector.create(size, function (_) {
      0
    })
  in
  let f =
    define self(cursor: int, base: vector(float)): parser(vector(float)) {
      if ge-int(cursor, size) {
        return(base)
      } else {
        with zonk {
          bind v = read-float() in
          bind _ = skip-space() in
          let _ on base = _store-float(base, cursor, v) in
          self(add-int(cursor, 1), base)
        }
      }
    }
  in
  with zonk {
    bind result = f(0, base) in
    return(result)
  }
}

constant sample-parser: parser(unit) {
  with zonk {
    bind v1 = read-int() in
    bind _ = skip-space() in
    bind v2 = read-int() in
    bind _ = skip-space() in
    bind xs = read-float-vector(v1) in
    printf("{}, {}\n", [show-int(v1), show-int(v2)]);
    core.vector.for(xs, function (x) {
      printf("{} ", [show-float(x)])
    });
    return(Unit)
  }
}

define zen(): unit {
  // construct an input
  let some-input = new-state(*"4 42 \n   5 4 3 2 1 -1234") in
  let result on some-input =
    // run the parser
    match run(sample-parser, some-input) {
    | Right(_) =>
      print("pass\n")
    | Left(e) =>
      printf("fail: {}\n", [report(e)])
    }
  in
  let _ = some-input in
  result
}
